import { {{if containsBinary}}type EmbeddableBinary, {{end}}Entity, FieldType, type TypeDefinition, DefaultField, DefaultTypeDefinition } from '@quinimbus/admin-ui'
import {{typeNameLCPlural}}View from '@/views/{{typeNameUCPlural}}ListView.vue'

export class {{typeNameUC}} extends Entity<{{typeNameUC}}> {
    {{for field in fields}}
    {{field.nameLC}}?: {{field.type}}{{end}}
}{{for field in fields}}{{if field.fieldType == "SELECTION" || field.fieldType == "SET_SELECTION"}}

export enum {{field.enumName}} {
    {{for allowedValue in field.allowedValues}}{{allowedValue.key}}, {{end}}
}{{end}}{{end}}

const {{typeNameLC}}Definition: TypeDefinition = {
    ...DefaultTypeDefinition,
    fields: [{{for field in fields}}
        {
            ...DefaultField,
            key: "{{field.nameLC}}",
            label: "{{field.label}}",
            type: FieldType.{{field.fieldType}}{{if weak && field.owningField}},
            owningField: {{field.owningField}}{{end}}{{if field.hiddenInForm}},
            hiddenInForm: true{{end}}{{if field.references != null}},
            references: "{{field.references}}"{{end}}{{if !field.allowedValues.isEmpty()}},
            allowedValues: [{{for allowedValue in field.allowedValues}}
                {
                    label: "{{allowedValue.label}}",
                    key: "{{allowedValue.key}}"
                },{{end}}
            ]{{end}}
        },{{end}}
    ],
    keyField: "{{keyField}}",
    icon: "{{icon}}",
    key: "{{typeNameLC}}",
    keyPlural: "{{typeNameLCPlural}}",
    labelSingular: "{{labelSingular}}",
    labelPlural: "{{labelPlural}}",
    listView: {{typeNameLCPlural}}View{{if weak}},
    weak: true,
    owningType: "{{owningType}}"{{end}},{{if hasGroup}}
    group: "{{group}}",{{end}}
    globalActions: [{{for action in globalActions}}
        {
            key: "{{action.key}}",
            label: "{{action.label}}",
            icon: "{{action.icon}}",
            requiredRoles: {
                anonymous: {{action.requiredRole.anonymous}},
                roles: [{{for role in action.requiredRole.roles}}"{{role}}",{{end}}]
            }
        },{{end}}
    ],
    requiredRoles: {
        create: {
            anonymous: {{requiredRoles.create.anonymous}},
            roles: [{{for role in requiredRoles.create.roles}}"{{role}}",{{end}}]
        },
        read: {
            anonymous: {{requiredRoles.read.anonymous}},
            roles: [{{for role in requiredRoles.read.roles}}"{{role}}",{{end}}]
        },
        update: {
            anonymous: {{requiredRoles.update.anonymous}},
            roles: [{{for role in requiredRoles.update.roles}}"{{role}}",{{end}}]
        },
        delete: {
            anonymous: {{requiredRoles.delete.anonymous}},
            roles: [{{for role in requiredRoles.delete.roles}}"{{role}}",{{end}}]
        }
    }
}

export { {{typeNameLC}}Definition }